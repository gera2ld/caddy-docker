{{- $store := dict "count" 0 "bindMap" dict -}}
{{- range $i, $container := $ -}}

  {{- $info := dict "ip" "" "bind" (index $container.Labels "virtual.bind") -}}
  {{- if not $info.bind -}}
    {{- continue -}}
  {{- end -}}
  {{- range $j, $net := $container.Networks -}}
    {{- if eq $net.Name $.Env.CADDY_NETWORK -}}
      {{- $_ := set $info "ip" $net.IP -}}
      {{- break -}}
    {{- end -}}
  {{- end -}}
  {{- if not $info.ip -}}
    {{- continue -}}
  {{- end -}}

  {{- $bindList := splitList ";" $info.bind -}}
  {{- range $j, $rawBind := $bindList -}}
    {{- $bindData := splitList "|" $rawBind -}}
    {{- $bind := trim (first $bindData) -}}
    {{- $directives := slice $bindData 1 }}
    {{- $proxy := dict "ip" $info.ip "name" $container.Name "directives" $directives -}}
    {{- if not (hasKey $store.bindMap $bind) -}}
      {{- $_ := set $store "count" (add $store.count 1) -}}
      {{- $proxyList := list $proxy -}}
      {{- $data := dict "index" $store.count "proxyList" $proxyList -}}
      {{- $_ := set $store.bindMap $bind $data -}}
    {{- else -}}
      {{- $data := dig $store.bindMap $bind -}}
      {{- $list := append $data.proxyList $proxy -}}
      {{- $_ := set $data "proxyList" $list -}}
    {{- end -}}
  {{- end -}}

{{- end -}}

{{ range $bind, $data := $store.bindMap }}
  {{- $bindInfo := dict "matcher" "" "port" "" "host" "" -}}
  {{- if or (hasPrefix "/" $bind) (hasPrefix "* " $bind) -}}
    {{- $portMatcherHost := splitn " " 3 $bind -}}
    {{- if ne $portMatcherHost._0 "*" -}}
      {{- $_ := set $bindInfo "matcher" $portMatcherHost._0 -}}
    {{- end -}}
    {{- $_ := set $bindInfo "port" $portMatcherHost._1 -}}
    {{- $_ := set $bindInfo "host" $portMatcherHost._2 -}}
  {{- else -}}
    {{- $portMatcherHost := splitn " " 2 $bind -}}
    {{- $_ := set $bindInfo "port" $portMatcherHost._0 -}}
    {{- $_ := set $bindInfo "host" $portMatcherHost._1 -}}
  {{- end -}}
  {{- $hostMatcher := list "dockergen-rule-" (toString $data.index) | join "" }}
@{{ $hostMatcher }} host {{ $bindInfo.host }}
handle @{{ $hostMatcher }} {
  {{- range $i, $proxy := $data.proxyList }}
  # {{ $proxy.name }}
  reverse_proxy {{ $bindInfo.matcher }} {
    {{- range $j, $directive := $proxy.directives }}
    {{ trim $directive }}
    {{- end }}
    to {{ $proxy.ip }}:{{ $bindInfo.port }}
  }
  {{- end }}
}
{{ end -}}
